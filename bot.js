require('dotenv').config();
const { Telegraf } = require('telegraf');
const { Pool } = require('pg');

const bot = new Telegraf(process.env.BOT_TOKEN);
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: false,
});

// ‚úÖ –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
(async () => {
  const client = await pool.connect();
  try {
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        name TEXT,
        tg_id BIGINT UNIQUE NOT NULL,
        rep INTEGER DEFAULT 0
      );
    `);
    await client.query(`
      CREATE TABLE IF NOT EXISTS logs (
        id SERIAL PRIMARY KEY,
        action TEXT,
        target_id BIGINT,
        actor_id BIGINT,
        timestamp TIMESTAMP DEFAULT NOW()
      );
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã users –∏ logs –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü', err);
  } finally {
    client.release();
  }
})();

// üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function isAdmin(ctx) {
  const userId = ctx.from.id;
  const chatMember = await ctx.getChatMember(userId);
  return ['administrator', 'creator'].includes(chatMember.status);
}

// üë• /vozroditsya ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
bot.command('vozroditsya', async (ctx) => {
  const userId = ctx.from.id;
  const userName = ctx.from.username;

  const client = await pool.connect();
  try {
    const check = await client.query('SELECT * FROM users WHERE tg_id = $1', [userId]);
    if (check.rowCount > 0) {
      return ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
    }

    await client.query('INSERT INTO users (name, tg_id, rep) VALUES ($1, $2, 0)', [userName, userId]);
    ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ–∑—Ä–æ–¥–∏–ª–∏—Å—å! –í–∞—à ID: ${userId}`);
  } catch (err) {
    console.error(err);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
  } finally {
    client.release();
  }
});

// üìä /status ‚Äî —Å—Ç–∞—Ç—É—Å —Å —Ä–∞–Ω–≥–æ–º
bot.command('status', async (ctx) => {
  const userId = ctx.from.id;
  const client = await pool.connect();

  try {
    const res = await client.query('SELECT rep FROM users WHERE tg_id = $1', [userId]);
    if (res.rowCount === 0) {
      return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vozroditsya');
    }

    const rep = res.rows[0].rep;
    let rank = '–ù–æ–≤–∏—á–æ–∫';
    if (rep >= 10) rank = '–õ–µ–≥–µ–Ω–¥–∞';
    else if (rep >= 5) rank = '–ê–∫—Ç–∏–≤–Ω—ã–π';

    ctx.reply(`üìä –í–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è: ${rep}\nüèÖ –†–∞–Ω–≥: ${rank}`);
  } catch (err) {
    console.error(err);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.');
  } finally {
    client.release();
  }
});

// üë§ /me ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ
bot.command('me', async (ctx) => {
  const userId = ctx.from.id;
  const client = await pool.connect();

  try {
    const res = await client.query('SELECT * FROM users WHERE tg_id = $1', [userId]);
    if (res.rowCount === 0) return ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');

    const user = res.rows[0];
    ctx.reply(`üßç‚Äç‚ôÇÔ∏è –í—ã:\nID –≤ –ë–î: ${user.id}\nTelegram ID: ${user.tg_id}\n–ò–º—è: ${user.name}\n–†–µ–ø—É—Ç–∞—Ü–∏—è: ${user.rep}`);
  } catch (err) {
    console.error(err);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
  } finally {
    client.release();
  }
});

// ‚ûï /rep <tg_id>
bot.command('rep', async (ctx) => {
  if (!await isAdmin(ctx)) return ctx.reply('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
  const args = ctx.message.text.split(' ');
  const tg_id = args[1];

  if (!tg_id) return ctx.reply('–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (tg_id).');

  try {
    const res = await pool.query('UPDATE users SET rep = rep + 1 WHERE tg_id = $1 RETURNING *', [tg_id]);
    if (res.rowCount === 0) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

    await pool.query('INSERT INTO logs (action, target_id, actor_id) VALUES ($1, $2, $3)', ['rep', tg_id, ctx.from.id]);

    ctx.reply(`‚úÖ –†–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${tg_id} —É–≤–µ–ª–∏—á–µ–Ω–∞. –°–µ–π—á–∞—Å: ${res.rows[0].rep}`);
  } catch (err) {
    console.error(err);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏.');
  }
});

// ‚ûñ /unrep <tg_id>
bot.command('unrep', async (ctx) => {
  if (!await isAdmin(ctx)) return ctx.reply('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
  const args = ctx.message.text.split(' ');
  const tg_id = args[1];

  if (!tg_id) return ctx.reply('–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (tg_id).');

  try {
    const res = await pool.query('SELECT rep FROM users WHERE tg_id = $1', [tg_id]);
    if (res.rowCount === 0) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    if (res.rows[0].rep <= 0) return ctx.reply('–†–µ–ø—É—Ç–∞—Ü–∏—è —É–∂–µ 0.');

    const updated = await pool.query('UPDATE users SET rep = rep - 1 WHERE tg_id = $1 RETURNING *', [tg_id]);
    await pool.query('INSERT INTO logs (action, target_id, actor_id) VALUES ($1, $2, $3)', ['unrep', tg_id, ctx.from.id]);

    ctx.reply(`‚ûñ –†–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–Ω–∏–∂–µ–Ω–∞. –°–µ–π—á–∞—Å: ${updated.rows[0].rep}`);
  } catch (err) {
    console.error(err);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏.');
  }
});

// üóë /delete <tg_id>
bot.command('delete', async (ctx) => {
  if (!await isAdmin(ctx)) return ctx.reply('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
  const args = ctx.message.text.split(' ');
  const tg_id = args[1];

  if (!tg_id) return ctx.reply('–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (tg_id).');

  try {
    const res = await pool.query('DELETE FROM users WHERE tg_id = $1 RETURNING *', [tg_id]);
    if (res.rowCount === 0) return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');

    await pool.query('INSERT INTO logs (action, target_id, actor_id) VALUES ($1, $2, $3)', ['delete', tg_id, ctx.from.id]);

    ctx.reply(`üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${tg_id} —É–¥–∞–ª—ë–Ω.`);
  } catch (err) {
    console.error(err);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.');
  }
});

// üìã /bd ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.command('bd', async (ctx) => {
  if (!await isAdmin(ctx)) return ctx.reply('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');

  const client = await pool.connect();
  try {
    const result = await client.query('SELECT * FROM users');
    if (result.rowCount === 0) return ctx.reply('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');

    let msg = 'üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';
    result.rows.forEach(user => {
      msg += `ID: ${user.id}, –ò–º—è: ${user.name}, TG ID: ${user.tg_id}, –†–µ–ø—É—Ç–∞—Ü–∏—è: ${user.rep}\n`;
    });

    ctx.reply(msg);
  } catch (err) {
    console.error(err);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ.');
  } finally {
    client.release();
  }
});

// üìú /log ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
bot.command('log', async (ctx) => {
  if (!await isAdmin(ctx)) return ctx.reply('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');

  try {
    const res = await pool.query('SELECT * FROM logs ORDER BY timestamp DESC LIMIT 10');
    if (res.rowCount === 0) return ctx.reply('–õ–æ–≥ –ø—É—Å—Ç.');

    let msg = 'üïì –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n';
    res.rows.forEach(log => {
      msg += `‚Ä¢ ${log.action.toUpperCase()} | Target: ${log.target_id}, By: ${log.actor_id}, –í—Ä–µ–º—è: ${log.timestamp.toLocaleString()}\n`;
    });

    ctx.reply(msg);
  } catch (err) {
    console.error(err);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–∞.');
  }
});

// üèÜ /top ‚Äî —Ä–µ–π—Ç–∏–Ω–≥
bot.command('top', async (ctx) => {
  try {
    const res = await pool.query('SELECT * FROM users ORDER BY rep DESC LIMIT 10');
    if (res.rowCount === 0) return ctx.reply('–ü–æ–∫–∞ –ø—É—Å—Ç–æ.');

    let msg = 'üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n';
    res.rows.forEach((user, i) => {
      msg += `${i + 1}. ${user.name} ‚Äî ${user.rep} –æ—á–∫–æ–≤\n`;
    });

    ctx.reply(msg);
  } catch (err) {
    console.error(err);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞.');
  }
});

// ‚ÑπÔ∏è /info ‚Äî —Å–ø—Ä–∞–≤–∫–∞
bot.command('info', (ctx) => {
  ctx.reply(`
üìò –ö–æ–º–∞–Ω–¥—ã:

üë§ /me ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
üë• /vozroditsya ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
üìä /status ‚Äî –≤–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è –∏ —Ä–∞–Ω–≥

üîß –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:
üß© /vostat <id> ‚Äî –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚ûï /rep <tg_id> ‚Äî –ø–æ–≤—ã—Å–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é
‚ûñ /unrep <tg_id> ‚Äî –ø–æ–Ω–∏–∑–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é
üóë /delete <tg_id> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
üìã /bd ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üìú /log ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
üèÜ /top ‚Äî —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üß™ /test ‚Äî —Ç–µ—Å—Ç –ë–î
‚ÑπÔ∏è /info ‚Äî –∫–æ–º–∞–Ω–¥—ã
  `);
});

// üß™ /test ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
bot.command('test', async (ctx) => {
  try {
    await pool.query('SELECT NOW()');
    ctx.reply('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç.');
  } catch (err) {
    console.error(err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ.');
  }
});

bot.launch();
console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
